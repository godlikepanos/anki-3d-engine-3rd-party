// standard normal diretional light one terxture pixel shader
varying vec4 diffuse;
varying vec4 ambient;
varying vec3 normal;
varying vec3 lightDir;
varying vec3 halfVector;
varying vec4 textureColorOnOff;

uniform sampler2D tex;

void main()
{
	vec3 n;
	vec3 halfV;
	vec3 viewV;
	vec3 ldir;
	float NdotL;
	float NdotHV;
	vec4 color = ambient;
	
	// a fragment shader can't write a verying variable, hence we need
	// a new variable to store the normalized interpolated normal 
	n = normalize(normal);
	
	// compute the dot product between normal and ldir 
	NdotL = max(dot(n,lightDir),0.0);

	if (NdotL > 0.0) {
		halfV = normalize(halfVector);
		NdotHV = max(dot(n,halfV),0.0);
		color += gl_FrontMaterial.specular * gl_LightSource[0].specular * pow(NdotHV,gl_FrontMaterial.shininess);
		color += diffuse * NdotL;
	}
		
	color = (texture2D(tex, gl_TexCoord[0].st) * textureColorOnOff + (vec4 (1.0, 1.0, 1.0, 1.0) - textureColorOnOff)) * color;
	gl_FragColor = color;
}

